{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Brent Tester's Digital Literacy Narrative Hello! Welcome to my final project for WRIT 4662W: Writing with Digital Technologies! My name is Brent Tester, and I'm a senior undergraduate at the University of Minnesota studying technical writing & communication. On this web site, I will walk you through my updated digital literacy narrative. At the beginning of our course, I created and published my first digital literacy narrative using Google Sites . If you'd like to compare the two versions, feel free to check out my initial digital literacy narrative! Throughout this new narrative, I will share my experiences, insights, and key takeaways from each major section of WRIT 4662W. The sections are organized chronologically as follows: HTML/CSS Git/Github Client Project Markdown DITA By ordering my narrative this way, I hope to demonstrate the ways my digital literacy has adapted, evolved, and improved over the last few months. To help guide your journey through my narrative, I'll provide a brief preview of each section: HTML/CSS In this section, I discuss my work with HTML and CSS. For this section of the course, we prepared a basic static site from the ground up using the fundamentals of HTML and CSS in combination with one another. In this section, you'll find my first artifact from the course: A live, hosted version of my very first web site design! Git/Github In this section, I discuss my work with Git, Github, and Github Pages, which I used to host this website! Git/Github provides writers with a way to collaborate on complex projects, and I'll emphasize how and why collaboration is so important for modern-day technical communicators. Client Project Speaking of collaboration... In this section, I discuss my experiences and work within a group setting during our client project. For the project, I was paired with three other students in the course\u2014we were called \"Team Slate\"\u2014to deliver website redesign recommendations for the Minnesota Austin Healey Club. Before you visit this section, be sure to check out the club's current website! Markdown In this section, I discuss my work with Markdown: The lightweight markup language I used to write this website! During our work with Markdown, we created write-ups for Lavacon 2020 , which is a virtual content strategy conference. Additionally, we also spent some time working with static site generators alongside Markdown. DITA In the final section, I discuss my work with DITA. DITA fundamentally changed how I thought about writing, and I found this section of our course to be the most challenging. Here, you'll also find another artifact from the course: A PDF output of some technical instructions from our structured authoring project.","title":"Home"},{"location":"#brent-testers-digital-literacy-narrative","text":"Hello! Welcome to my final project for WRIT 4662W: Writing with Digital Technologies! My name is Brent Tester, and I'm a senior undergraduate at the University of Minnesota studying technical writing & communication. On this web site, I will walk you through my updated digital literacy narrative. At the beginning of our course, I created and published my first digital literacy narrative using Google Sites . If you'd like to compare the two versions, feel free to check out my initial digital literacy narrative! Throughout this new narrative, I will share my experiences, insights, and key takeaways from each major section of WRIT 4662W. The sections are organized chronologically as follows: HTML/CSS Git/Github Client Project Markdown DITA By ordering my narrative this way, I hope to demonstrate the ways my digital literacy has adapted, evolved, and improved over the last few months. To help guide your journey through my narrative, I'll provide a brief preview of each section:","title":"Brent Tester's Digital Literacy Narrative"},{"location":"#htmlcss","text":"In this section, I discuss my work with HTML and CSS. For this section of the course, we prepared a basic static site from the ground up using the fundamentals of HTML and CSS in combination with one another. In this section, you'll find my first artifact from the course: A live, hosted version of my very first web site design!","title":"HTML/CSS"},{"location":"#gitgithub","text":"In this section, I discuss my work with Git, Github, and Github Pages, which I used to host this website! Git/Github provides writers with a way to collaborate on complex projects, and I'll emphasize how and why collaboration is so important for modern-day technical communicators.","title":"Git/Github"},{"location":"#client-project","text":"Speaking of collaboration... In this section, I discuss my experiences and work within a group setting during our client project. For the project, I was paired with three other students in the course\u2014we were called \"Team Slate\"\u2014to deliver website redesign recommendations for the Minnesota Austin Healey Club. Before you visit this section, be sure to check out the club's current website!","title":"Client Project"},{"location":"#markdown","text":"In this section, I discuss my work with Markdown: The lightweight markup language I used to write this website! During our work with Markdown, we created write-ups for Lavacon 2020 , which is a virtual content strategy conference. Additionally, we also spent some time working with static site generators alongside Markdown.","title":"Markdown"},{"location":"#dita","text":"In the final section, I discuss my work with DITA. DITA fundamentally changed how I thought about writing, and I found this section of our course to be the most challenging. Here, you'll also find another artifact from the course: A PDF output of some technical instructions from our structured authoring project.","title":"DITA"},{"location":"clientproject/","text":"Client Project In this unit, our class collaborated with the Minnesota Austin Healey Club to provide them with a few pontential website redesigns in the form of a formal report. The report consisted of a project narrative, some sketches and wireframes, descriptions of those materials, and other/general recommendations for the website redesign. For the project, I was assigned to Team Slate, which consisted of myself and three other students from the class. The project consisted of four checkpoints spanning over four weeks: 1. Needs analysis 2. Initial project plan 3. Progress update 4. Final report My Experience with the Client Project The project began with some individual work; we all watched an interview with a member of the club (who also happens to be a professional technical communicator!) and Professor Card. In the interview, they addressed the key issues of the current website and discussed some potential needs for an updated website. By watching the interview, we were all able to obtain a general understanding of what was wrong, what needed to be fixed, and\u2014perhaps most importantly\u2014what could be fixed. Once we completed our individual work, we engaged in the collaborative process of finalizing our team's needs analysis. Once we completed our needs analysis, we began the redesign process. Our redesign included the website's aesthetics, organization, and the writing (we frequently referenced Janice Redish's book Letting Go of the Words: Writing Web Content that Works for the organization and writing redesign). For the website's organization, we mocked up a few wireframes to provide a basic structure for the website. Once we completed the wireframes, we moved on to more high-fidelity mockups for the website. Here, we were able to incorporate more detailed strucutre, more emphasis on aesthetics, and a polished image of what the final web site resigned could look like (see image below): In our final report, we also included a few general recommendations for the writing on the website, and we primarily emphasized hierarchical organization (i.e., put the most important information near the top of each sub-page) and a casual, informal tone. Overall, I feel incredible fortunate to be a part of Team Slate. All of our team members contributed to the project with their unique skillset (a special shoutout to one team member who brought signficant experience with Figma and was able to design such polished mockups!), and we all got along great. Our meetings were always productive, professional, and respectful; I really cannot say enough positive things about my experience within the group, and I am proud of our final results. Key Takeaways from the Client Project Throughout the client project, I learned a lot about collaboration. While we did not get to explore the functionality of Git/Github in this project, I did learn a lot about collaboration within a relatively complex technical communication project. As I mentioned above, all four memebers of our group brought a unique set of skills to the team. Some memembers brought advanced digital literacies with digital design tools, and others brought advanced digital literacies with web authoring tools and web-based rhetoric. Before the client project, I was somewhat insecure about my level of digital literacy: I was not comfortable with digital design tools, and I was just beginning to learn web authoring tools. However, because the strengths of my team memembers made up for my weaknesses, I felt empowered to contribute with the skills I possessed. The key takeaway here, then, is that everyone has strengths and weaknesses, and collaborative efforts require professional, respectful, and consistent communication to ensure those strengths and weaknesses are explored in a helpful, productive way. Through the needs analysis and redesign process, I also learned about a lot about limits . Specifically, I realized that technical communicators must be realistic in their design efforts. In our project, we were limited by time, resources, skillsets\u2014we're only students, after all\u2014and the capabilities/expectations of our clients. Certainly, limits can be frustrating, but they can also create situations where creativity is necessary to get the job done. For my own digital literacy, I quickly realized that I am incredibly limited by factors both within and outside of my own control. By working to push the limits of the factors that I can control (e.g., improving my own digital literacy relative to digital authoring tools and digital design tools), I can contribute to collaborative work in more dynamic ways. Nonetheless, I also need to be aware that I will always experience limits in my work as a technical communicator, and I can use those limits to come up with creative solutions to the problem at hand.","title":"Client Project"},{"location":"clientproject/#client-project","text":"In this unit, our class collaborated with the Minnesota Austin Healey Club to provide them with a few pontential website redesigns in the form of a formal report. The report consisted of a project narrative, some sketches and wireframes, descriptions of those materials, and other/general recommendations for the website redesign. For the project, I was assigned to Team Slate, which consisted of myself and three other students from the class. The project consisted of four checkpoints spanning over four weeks: 1. Needs analysis 2. Initial project plan 3. Progress update 4. Final report","title":"Client Project"},{"location":"clientproject/#my-experience-with-the-client-project","text":"The project began with some individual work; we all watched an interview with a member of the club (who also happens to be a professional technical communicator!) and Professor Card. In the interview, they addressed the key issues of the current website and discussed some potential needs for an updated website. By watching the interview, we were all able to obtain a general understanding of what was wrong, what needed to be fixed, and\u2014perhaps most importantly\u2014what could be fixed. Once we completed our individual work, we engaged in the collaborative process of finalizing our team's needs analysis. Once we completed our needs analysis, we began the redesign process. Our redesign included the website's aesthetics, organization, and the writing (we frequently referenced Janice Redish's book Letting Go of the Words: Writing Web Content that Works for the organization and writing redesign). For the website's organization, we mocked up a few wireframes to provide a basic structure for the website. Once we completed the wireframes, we moved on to more high-fidelity mockups for the website. Here, we were able to incorporate more detailed strucutre, more emphasis on aesthetics, and a polished image of what the final web site resigned could look like (see image below): In our final report, we also included a few general recommendations for the writing on the website, and we primarily emphasized hierarchical organization (i.e., put the most important information near the top of each sub-page) and a casual, informal tone. Overall, I feel incredible fortunate to be a part of Team Slate. All of our team members contributed to the project with their unique skillset (a special shoutout to one team member who brought signficant experience with Figma and was able to design such polished mockups!), and we all got along great. Our meetings were always productive, professional, and respectful; I really cannot say enough positive things about my experience within the group, and I am proud of our final results.","title":"My Experience with the Client Project"},{"location":"clientproject/#key-takeaways-from-the-client-project","text":"Throughout the client project, I learned a lot about collaboration. While we did not get to explore the functionality of Git/Github in this project, I did learn a lot about collaboration within a relatively complex technical communication project. As I mentioned above, all four memebers of our group brought a unique set of skills to the team. Some memembers brought advanced digital literacies with digital design tools, and others brought advanced digital literacies with web authoring tools and web-based rhetoric. Before the client project, I was somewhat insecure about my level of digital literacy: I was not comfortable with digital design tools, and I was just beginning to learn web authoring tools. However, because the strengths of my team memembers made up for my weaknesses, I felt empowered to contribute with the skills I possessed. The key takeaway here, then, is that everyone has strengths and weaknesses, and collaborative efforts require professional, respectful, and consistent communication to ensure those strengths and weaknesses are explored in a helpful, productive way. Through the needs analysis and redesign process, I also learned about a lot about limits . Specifically, I realized that technical communicators must be realistic in their design efforts. In our project, we were limited by time, resources, skillsets\u2014we're only students, after all\u2014and the capabilities/expectations of our clients. Certainly, limits can be frustrating, but they can also create situations where creativity is necessary to get the job done. For my own digital literacy, I quickly realized that I am incredibly limited by factors both within and outside of my own control. By working to push the limits of the factors that I can control (e.g., improving my own digital literacy relative to digital authoring tools and digital design tools), I can contribute to collaborative work in more dynamic ways. Nonetheless, I also need to be aware that I will always experience limits in my work as a technical communicator, and I can use those limits to come up with creative solutions to the problem at hand.","title":"Key Takeaways from the Client Project"},{"location":"contact/","text":"Contact If you have any questions or would like to continue any of these discussions, please feel free to contact me via email at teste033@umn.ed and/or brent.h.tester@gmail.com . Thanks!","title":"Contact"},{"location":"contact/#contact","text":"If you have any questions or would like to continue any of these discussions, please feel free to contact me via email at teste033@umn.ed and/or brent.h.tester@gmail.com . Thanks!","title":"Contact"},{"location":"dita/","text":"DITA From XML.org , the Darwin INformation Typing Architecture (DITA) is a standard XML-based architecture. DITA promotes content modularlity and content reuse, and it is frequently used by modern-day technical communicators. To use a little less jargon, DITA fundamentally changes how people create documentation. Rather than write each document individually, DITA promotes writing small sections of documents that can then be reused and/or repurposed across many other documents. Thus, in order to create a larger document, a technical communicator would piece together those sections within a document map. In this section of our course, we were asked to used DITA to create a technical document of our choosing. For my project, I created a set of instructions for making a traditional latte. My Experience with DITA Much like HTML, CSS, and Git, I immediately felt overwhelmed when I approached DITA. DITA requires a relatively complex syntax, a deep understanding of its purposes and functionality, as well as a relatively deep understanding of a web authoring tool capable of facilitating DITA-based writing. Having learned from our HTML/CSS unit that abstractly approaching these tools does little to help me improve my digital literacy, I immediately downloaded the Oxygen XML Editor . Oxygen is a little more complex relative to other XML editors, but it also provides more capabilities and a relatively user-friendly graphical interface. Once I downloaded and installed Oxygen, I began following along a few video guides to learn the basic syntax, functions, and capabilities of DITA. While these guides were certainly helpful, I nonetheless struggled to fundamentally understand both DITA and Oxygen. In those guides, the instructors emphasized \"topic-based authoring\", which was an idea I had never heard of prior to my work with DITA. Rather than linearly write an cohesive document, I was supposed to write various \"topics\" that I would then piece together to create a cohesive document. Not only did it take some time to actually understand why and how that worked, it fundamentally challenged the ways that I thought about writing. I struggled to absorb the philosophy of DITA, but I ultimately persevered (by inputing a whole lot of time...) and learned the fundamentals of the tools. Once I learned the fundamentals, I began the authoring process for my technical instructions for making a traditional latte. Before I entered into the technical writing and communication program at the University of Minnesota, I was a barista for many years; thus, I thought it would be a fun blend to blend my two professional paths. I wrote a concept topic about the traditional latte, a few task topics for making the traditional latte, as well as a reference topic for the neccessary supplies and equipment. Once I completed the topics, I created a DITA map that structured my instructions in the order that I wanted the audience to read them. If you'd like to see my instructions, feel free to check out a PDF ouput that I generated using Oxygen! Key Takeaways from DITA I found our sectin on DITA to be the most challenging section of the course. Not only did I have to learn a few new tools, but I also had to relearn how to write. The challenge to relearn how to write revealed a few key weaknesses in my writing. Specifically, I now realize how much I struggle with concision. By writing in topis, I was forced to remove any unneccessary information, as the topics needed to be reusable across many different contexts. I was somewhat shocked at how much more difficult it was to write less . Thus, I greatly appreciated our DITA section for the insights it provided me into myself, especially as an aspiring writer/technical communicator. Our section on DITA also demonstrated the importance of skills transfer within my digital literacy. By learning the basics of Oxygen, I realized that I am fully capabable of learning most digital tools necessary to be an effective technical communicator. I was able to transfer my learning processes from the earlier sections and learn the basics of a relatively complex digital tool. While I certainly need more work to fully understand these tools, I nonetheless gained confidence in my ability to improve my overall digital literacy. Before this class, I always felt intimidated and overhwelmed by the numerous digital tools within the field of technical communication. However, now that I have this experience, I feel much more comfortable walking into unknown territory. Additionally, because these digital tools are constantly evolving, updating, and changing completely, I believe knowing how to learn is an incredibly valuable long-term skill.","title":"DITA"},{"location":"dita/#dita","text":"From XML.org , the Darwin INformation Typing Architecture (DITA) is a standard XML-based architecture. DITA promotes content modularlity and content reuse, and it is frequently used by modern-day technical communicators. To use a little less jargon, DITA fundamentally changes how people create documentation. Rather than write each document individually, DITA promotes writing small sections of documents that can then be reused and/or repurposed across many other documents. Thus, in order to create a larger document, a technical communicator would piece together those sections within a document map. In this section of our course, we were asked to used DITA to create a technical document of our choosing. For my project, I created a set of instructions for making a traditional latte.","title":"DITA"},{"location":"dita/#my-experience-with-dita","text":"Much like HTML, CSS, and Git, I immediately felt overwhelmed when I approached DITA. DITA requires a relatively complex syntax, a deep understanding of its purposes and functionality, as well as a relatively deep understanding of a web authoring tool capable of facilitating DITA-based writing. Having learned from our HTML/CSS unit that abstractly approaching these tools does little to help me improve my digital literacy, I immediately downloaded the Oxygen XML Editor . Oxygen is a little more complex relative to other XML editors, but it also provides more capabilities and a relatively user-friendly graphical interface. Once I downloaded and installed Oxygen, I began following along a few video guides to learn the basic syntax, functions, and capabilities of DITA. While these guides were certainly helpful, I nonetheless struggled to fundamentally understand both DITA and Oxygen. In those guides, the instructors emphasized \"topic-based authoring\", which was an idea I had never heard of prior to my work with DITA. Rather than linearly write an cohesive document, I was supposed to write various \"topics\" that I would then piece together to create a cohesive document. Not only did it take some time to actually understand why and how that worked, it fundamentally challenged the ways that I thought about writing. I struggled to absorb the philosophy of DITA, but I ultimately persevered (by inputing a whole lot of time...) and learned the fundamentals of the tools. Once I learned the fundamentals, I began the authoring process for my technical instructions for making a traditional latte. Before I entered into the technical writing and communication program at the University of Minnesota, I was a barista for many years; thus, I thought it would be a fun blend to blend my two professional paths. I wrote a concept topic about the traditional latte, a few task topics for making the traditional latte, as well as a reference topic for the neccessary supplies and equipment. Once I completed the topics, I created a DITA map that structured my instructions in the order that I wanted the audience to read them. If you'd like to see my instructions, feel free to check out a PDF ouput that I generated using Oxygen!","title":"My Experience with DITA"},{"location":"dita/#key-takeaways-from-dita","text":"I found our sectin on DITA to be the most challenging section of the course. Not only did I have to learn a few new tools, but I also had to relearn how to write. The challenge to relearn how to write revealed a few key weaknesses in my writing. Specifically, I now realize how much I struggle with concision. By writing in topis, I was forced to remove any unneccessary information, as the topics needed to be reusable across many different contexts. I was somewhat shocked at how much more difficult it was to write less . Thus, I greatly appreciated our DITA section for the insights it provided me into myself, especially as an aspiring writer/technical communicator. Our section on DITA also demonstrated the importance of skills transfer within my digital literacy. By learning the basics of Oxygen, I realized that I am fully capabable of learning most digital tools necessary to be an effective technical communicator. I was able to transfer my learning processes from the earlier sections and learn the basics of a relatively complex digital tool. While I certainly need more work to fully understand these tools, I nonetheless gained confidence in my ability to improve my overall digital literacy. Before this class, I always felt intimidated and overhwelmed by the numerous digital tools within the field of technical communication. However, now that I have this experience, I feel much more comfortable walking into unknown territory. Additionally, because these digital tools are constantly evolving, updating, and changing completely, I believe knowing how to learn is an incredibly valuable long-term skill.","title":"Key Takeaways from DITA"},{"location":"github/","text":"Git, Github, and Github Pages Technical communicators use Git and Github to collaborate on large projects. Git is a version-control system that tracks any changes made during a collaborative project. Github utilizes Git and provides collaborators with a platform to host those projects within online repositories. Github Pages allows you to host live web pages directly from Github repositories. If you're looking for an artificat to demonstrate my work with Git, Github, and Github pages... you're looking at it! I used all three tools to publish this digital literacy narrative. My Experience with Git, Github, and Github Pages As I began our unit on Git, I immediately felt intimidated (are you seeing a theme, here?). Git requires significant use of the command line, and I came into the unit with almost zero command line experience. Thankfully, Professor Card provided us with a helpful walkthrough video, and the basic resources made the process a lot easier than I expected. By working with the command line during this unit, I felt much more prepared and comfortable when the command line became essential to making this website. However, to be completely honest, I still do not fully understand the fundamentals of Git. I understand its basic purpose, but I do not really understand what is happening when I enter certain commands into the command line. I primarily attribute this to my over-reliance on Github, which provided me with a graphic interface for creating a repository. In the future, I need to re-visit Git to fully understand its purpose and full functions. In this unit, I used Git, Github, and Github Pages to host a live version of my first static site . As I mentioned above, I over-relied on Github throughout this unit, as it provides a graphical user interface. While I did not understand the fundamentals of Git (i.e., I had a hard time fully utilizing the command line with Git), I did begin to understand the potential for collaboration using these tools. I managed to host a repository, make a clone of the repository, make a few local changes, and push those changes back into the hosted version. Addiitionally, using Github, I could see the specific changes I made, as well as when I made those changes to the intial version. In the future, I'd like to use Git and Github in a collaborative setting, as we only engaged with the tools at an individual level. Key Takeaways from Git, Github, and Github Pages The most important takeaway from our Git, Github, and Github Pages unit was how important version control is within a collaborative seeting, especially within larger technical communication projects. During my time in the technical writing and communication program, I have only engaged in collaborative projects within the Google Suite (e.g., Google Docs, Google Slides, Google Drive, etc.). While those tools are great for simple projects, I cannot fathom effectively collaborating on projects that involve many more people, teams, and/or departments, especially when timelines are not as aligned as they are within the college setting. Git and Github seem like incredibly important and effective tools for larger-scale collaboration, and I hope to learn more about those processes in the near future. As for Github Pages, I learned about a great web page hosting service, and it was awesome to see my first static site live on the internet. By working with Git, Github, and Github Pages, I feel much more confident creating a web project, hosting the web project, and sharing it with future collaborators.","title":"Git/Github/Github Pages"},{"location":"github/#git-github-and-github-pages","text":"Technical communicators use Git and Github to collaborate on large projects. Git is a version-control system that tracks any changes made during a collaborative project. Github utilizes Git and provides collaborators with a platform to host those projects within online repositories. Github Pages allows you to host live web pages directly from Github repositories. If you're looking for an artificat to demonstrate my work with Git, Github, and Github pages... you're looking at it! I used all three tools to publish this digital literacy narrative.","title":"Git, Github, and Github Pages"},{"location":"github/#my-experience-with-git-github-and-github-pages","text":"As I began our unit on Git, I immediately felt intimidated (are you seeing a theme, here?). Git requires significant use of the command line, and I came into the unit with almost zero command line experience. Thankfully, Professor Card provided us with a helpful walkthrough video, and the basic resources made the process a lot easier than I expected. By working with the command line during this unit, I felt much more prepared and comfortable when the command line became essential to making this website. However, to be completely honest, I still do not fully understand the fundamentals of Git. I understand its basic purpose, but I do not really understand what is happening when I enter certain commands into the command line. I primarily attribute this to my over-reliance on Github, which provided me with a graphic interface for creating a repository. In the future, I need to re-visit Git to fully understand its purpose and full functions. In this unit, I used Git, Github, and Github Pages to host a live version of my first static site . As I mentioned above, I over-relied on Github throughout this unit, as it provides a graphical user interface. While I did not understand the fundamentals of Git (i.e., I had a hard time fully utilizing the command line with Git), I did begin to understand the potential for collaboration using these tools. I managed to host a repository, make a clone of the repository, make a few local changes, and push those changes back into the hosted version. Addiitionally, using Github, I could see the specific changes I made, as well as when I made those changes to the intial version. In the future, I'd like to use Git and Github in a collaborative setting, as we only engaged with the tools at an individual level.","title":"My Experience with Git, Github, and Github Pages"},{"location":"github/#key-takeaways-from-git-github-and-github-pages","text":"The most important takeaway from our Git, Github, and Github Pages unit was how important version control is within a collaborative seeting, especially within larger technical communication projects. During my time in the technical writing and communication program, I have only engaged in collaborative projects within the Google Suite (e.g., Google Docs, Google Slides, Google Drive, etc.). While those tools are great for simple projects, I cannot fathom effectively collaborating on projects that involve many more people, teams, and/or departments, especially when timelines are not as aligned as they are within the college setting. Git and Github seem like incredibly important and effective tools for larger-scale collaboration, and I hope to learn more about those processes in the near future. As for Github Pages, I learned about a great web page hosting service, and it was awesome to see my first static site live on the internet. By working with Git, Github, and Github Pages, I feel much more confident creating a web project, hosting the web project, and sharing it with future collaborators.","title":"Key Takeaways from Git, Github, and Github Pages"},{"location":"htmlcss/","text":"HTML and CSS Technical communicators often use Hypertext Markup Language (HTML) and Cascading Style Sheets (CSS) in combination with one another to build web pages from the ground up. In WRIT 4662W, we began the course by learning the basics of HTML and CSS to build a basic static site. If you'd like to see my first project in the course, feel free to check it out! My Experience with HTML/CSS Before taking WRIT 4662W, I had almost zero experience with web design/web-based writing. In previous courses, I \"designed\" a few basic web pages using content management systems (CMS), with Google Sites being the CMS I most frequently used. During the first week of this course, we were asked to create our initial digital literacy narratives. I created my initial digital literacy narrative using Google Sites, and I immediately remembered how restrictive, uncreative, but nonetheless straightforward the tool was. In the new few weeks of the course, we began to learn the basics of HTML and CSS, and I immediately noticed how much more dynamic, creative, but nonetheless complicated these tools could be. Initially, I was completely overwhelmed; I had never learned a coding language before, and I was incredibly intimidated to start from scratch, so to speak. I read a few guides and watched a few informative videos, but I still did not know know exactly how these tools worked, nor did I really understand how they worked in combination with one another. After being frustrated for some time, I decided to experiment with some basic code that Professor Card provided the class. Rather than try to learn HTML/CSS in the abstract, I used Professor Card's code to experiement with the inputs and values. By manipulating his code is various ways, I quickly learned what each \"tag\" did for the overall structure and/or aesthetic of the web page. After a few hours of experimenting and absorbing some more basic information, I felt confident enough to build the basic structure of my own static site. This method of trial and error proved to be the most effective way to learn. For HTML, I would add a line of code to my index, refresh my local web page, and see how the page was different from the previous version. For CSS, I would add a line of code, manipulate the values a few times, and see how those changes affected the various versions. Additionally, I quickly learned that time is perhaps the most important part of learning HTML/CSS. I spent many hours tinkering with my code, and that process was much more valuable than reading abstract ideas about the tools, although that information was certainly important. Key Takeaways from HTML/CSS As I mentioned above, the notion of trial and error was perhaps the most important realization I made during our HTML/CSS unit. Coming from a writing background, trial and error is more-or-less comparable to the drafting process; however, I experienced far more errors in the web design process than I ever had in the traditional writing process. What I took away from HTML/CSS, then, was that making errors is an essential part of the process, and my frustration only showed that I was invested in actually improving my digital literacy by learning the fundamentals of HTML/CSS. Additionally, because I needed to make these errors to better understand these tools, I also needed to set aside adequate time to engage in that trial and error process. By working with HTML/CSS (as well as reading a great article by Jason Tham ), I also realized the potential for rhetorical flexibility with HTML/CSS. That is, I realized that the \"from the ground up\" approach to web design affords technical communicators much more flexibility in approaching various rhetorical situations. While I certainly am limited by my relativley basic level of understanding, I nonetheless understand how valuable these digital tools are within the larger project of creating more effective communication materials.","title":"HTML/CSS"},{"location":"htmlcss/#html-and-css","text":"Technical communicators often use Hypertext Markup Language (HTML) and Cascading Style Sheets (CSS) in combination with one another to build web pages from the ground up. In WRIT 4662W, we began the course by learning the basics of HTML and CSS to build a basic static site. If you'd like to see my first project in the course, feel free to check it out!","title":"HTML and CSS"},{"location":"htmlcss/#my-experience-with-htmlcss","text":"Before taking WRIT 4662W, I had almost zero experience with web design/web-based writing. In previous courses, I \"designed\" a few basic web pages using content management systems (CMS), with Google Sites being the CMS I most frequently used. During the first week of this course, we were asked to create our initial digital literacy narratives. I created my initial digital literacy narrative using Google Sites, and I immediately remembered how restrictive, uncreative, but nonetheless straightforward the tool was. In the new few weeks of the course, we began to learn the basics of HTML and CSS, and I immediately noticed how much more dynamic, creative, but nonetheless complicated these tools could be. Initially, I was completely overwhelmed; I had never learned a coding language before, and I was incredibly intimidated to start from scratch, so to speak. I read a few guides and watched a few informative videos, but I still did not know know exactly how these tools worked, nor did I really understand how they worked in combination with one another. After being frustrated for some time, I decided to experiment with some basic code that Professor Card provided the class. Rather than try to learn HTML/CSS in the abstract, I used Professor Card's code to experiement with the inputs and values. By manipulating his code is various ways, I quickly learned what each \"tag\" did for the overall structure and/or aesthetic of the web page. After a few hours of experimenting and absorbing some more basic information, I felt confident enough to build the basic structure of my own static site. This method of trial and error proved to be the most effective way to learn. For HTML, I would add a line of code to my index, refresh my local web page, and see how the page was different from the previous version. For CSS, I would add a line of code, manipulate the values a few times, and see how those changes affected the various versions. Additionally, I quickly learned that time is perhaps the most important part of learning HTML/CSS. I spent many hours tinkering with my code, and that process was much more valuable than reading abstract ideas about the tools, although that information was certainly important.","title":"My Experience with HTML/CSS"},{"location":"htmlcss/#key-takeaways-from-htmlcss","text":"As I mentioned above, the notion of trial and error was perhaps the most important realization I made during our HTML/CSS unit. Coming from a writing background, trial and error is more-or-less comparable to the drafting process; however, I experienced far more errors in the web design process than I ever had in the traditional writing process. What I took away from HTML/CSS, then, was that making errors is an essential part of the process, and my frustration only showed that I was invested in actually improving my digital literacy by learning the fundamentals of HTML/CSS. Additionally, because I needed to make these errors to better understand these tools, I also needed to set aside adequate time to engage in that trial and error process. By working with HTML/CSS (as well as reading a great article by Jason Tham ), I also realized the potential for rhetorical flexibility with HTML/CSS. That is, I realized that the \"from the ground up\" approach to web design affords technical communicators much more flexibility in approaching various rhetorical situations. While I certainly am limited by my relativley basic level of understanding, I nonetheless understand how valuable these digital tools are within the larger project of creating more effective communication materials.","title":"Key Takeaways from HTML/CSS"},{"location":"markdown/","text":"Markdown Markdown is a lightweight markup language, and it is the language that I used to write this website! Much like my work with Git, Github, and Github Pages, if you're looking for an artificant to demonstrate my work with Markdown... you're still looking at it! Markdown's syntax is super simple, but it nonetheless provides enough capabilities to make some pretty cool documentation. Using Markdown, I wrote a summary of a Lavacon 2020 presentation titled \"UX and Hip Hop: A Love Story\" by Mike Walkusky. In this section of the course, we also discussed and experimented with some static site generators such as MkDocs and Jekyll . You can checkout a collection of our Lavacon summaries that we wrote using Markdown, which Professor Card created using MkDocs. For this project, I used MkDocs to generate my static site. My Experience with Markdown and Static Site Generators As mentioned above, Markdown is relatively simple. I began by learning the basic syntax, which only took a couple of hours total. I appreciated the readability, familiarity, and intuitiveness of the language. Nonetheless, there were a few features that took some time to learn, such as embdedding links and images within the text. To show the basic structure and syntax of markdown, here's a screenshot of a page of code from this website: As you can see, the inputs are relatively straightforward, but there are still some features that take some time to learn. I appreciated the Lavacon 2020 assignment in combination with our Markdown unit, too. I learned a lot about content management strategy, and it was fascinating to hear industry professionals talk about the future of technical writing and communication at such a high level. Overall, I found this to be the most straightforward, efficient, and intuitive tool that we covered in the course. As for the static site generator... I was forced to revist the command line. As I previously mentioned, I used MkDocs to create this website. MkDocs requires some work with the command line, and I followed Professor Card's lead to learn the basics of working with the tool. This time around, I felt much more comfortable operating the command line; here's a screenshot of me generating a local version of this website for testing purposes: While I still have much to learn about the command line, I'm glad that I revisted the tool and became more familiar with it. Takeaways from Markdown and Static Site Generators Our unit on Markdown and Static Site Generators showed me that not everything within technical communication needs to be complicated! Markdown is relatively simple, but that does not mean it is not effective. For certain rhetorical situations, more complex, dynamic tools (e.g., HTML and CSS) are certainly necessary. However, in other rhetorical situations, simple tools like Markdown are incredible effective. If I need to quickly make web documentation that is straight to the point, Markdown is a great option. Similarly, static site generators make the web publishing process much simpler. By automatically translating Markdown files, static site generators offer an incredibly efficient way to make important web pages. Certainly, it is important to understand both the automatic and the manual processes for web authoring and publishing, and I felt like our section on Markdown and Static Site Generators was a great way of combining those two processes.","title":"Markdown/Static Site Generators"},{"location":"markdown/#markdown","text":"Markdown is a lightweight markup language, and it is the language that I used to write this website! Much like my work with Git, Github, and Github Pages, if you're looking for an artificant to demonstrate my work with Markdown... you're still looking at it! Markdown's syntax is super simple, but it nonetheless provides enough capabilities to make some pretty cool documentation. Using Markdown, I wrote a summary of a Lavacon 2020 presentation titled \"UX and Hip Hop: A Love Story\" by Mike Walkusky. In this section of the course, we also discussed and experimented with some static site generators such as MkDocs and Jekyll . You can checkout a collection of our Lavacon summaries that we wrote using Markdown, which Professor Card created using MkDocs. For this project, I used MkDocs to generate my static site.","title":"Markdown"},{"location":"markdown/#my-experience-with-markdown-and-static-site-generators","text":"As mentioned above, Markdown is relatively simple. I began by learning the basic syntax, which only took a couple of hours total. I appreciated the readability, familiarity, and intuitiveness of the language. Nonetheless, there were a few features that took some time to learn, such as embdedding links and images within the text. To show the basic structure and syntax of markdown, here's a screenshot of a page of code from this website: As you can see, the inputs are relatively straightforward, but there are still some features that take some time to learn. I appreciated the Lavacon 2020 assignment in combination with our Markdown unit, too. I learned a lot about content management strategy, and it was fascinating to hear industry professionals talk about the future of technical writing and communication at such a high level. Overall, I found this to be the most straightforward, efficient, and intuitive tool that we covered in the course. As for the static site generator... I was forced to revist the command line. As I previously mentioned, I used MkDocs to create this website. MkDocs requires some work with the command line, and I followed Professor Card's lead to learn the basics of working with the tool. This time around, I felt much more comfortable operating the command line; here's a screenshot of me generating a local version of this website for testing purposes: While I still have much to learn about the command line, I'm glad that I revisted the tool and became more familiar with it.","title":"My Experience with Markdown and Static Site Generators"},{"location":"markdown/#takeaways-from-markdown-and-static-site-generators","text":"Our unit on Markdown and Static Site Generators showed me that not everything within technical communication needs to be complicated! Markdown is relatively simple, but that does not mean it is not effective. For certain rhetorical situations, more complex, dynamic tools (e.g., HTML and CSS) are certainly necessary. However, in other rhetorical situations, simple tools like Markdown are incredible effective. If I need to quickly make web documentation that is straight to the point, Markdown is a great option. Similarly, static site generators make the web publishing process much simpler. By automatically translating Markdown files, static site generators offer an incredibly efficient way to make important web pages. Certainly, it is important to understand both the automatic and the manual processes for web authoring and publishing, and I felt like our section on Markdown and Static Site Generators was a great way of combining those two processes.","title":"Takeaways from Markdown and Static Site Generators"}]}